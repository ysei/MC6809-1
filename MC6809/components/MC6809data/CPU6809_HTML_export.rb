"""
    6809 instruction set data
    ~~~~~~~~~~~~~~~~~~~~~~~~~
    
    data from
        * http://www.maddes.net/m6809pm/sections.htm#sec4_4
        * http://www.burgins.com/m6809.html
        * http://www.maddes.net/m6809pm/appendix_a.htm#appA
    end
    
    :copyleft: 2013-2014 by Jens Diemer
    :license: GNU GPL v3 or above, see LICENSE for more details.
end
"""

require __future__

require os
require sys

PY2 = sys.version_info[0] == 2
if PY2
    range = xrange
end

from MC6809.components.MC6809data.MC6809_op_data import OP_DATA, BYTE, WORD
from MC6809.components.MC6809data.MC6809_op_docs import OP_DOC


OUTFILENAME = "CPU6809_opcodes.html"

WIDTH_DICT = {
    nil: "no",
    BYTE: "byte",
    WORD: "word",
end
}


class Cell < object
    def initialize (txt)
        @txt = txt
        @rowspan = 0
        @headline = nil
    end
    def html
        if @rowspan.equal? nil
            return ""
        end
        elsif @rowspan == 1
            return "<td>%s</td>" % @txt
        end
        return sprintf('<td rowspan="%i" title="%s: %s">%s</td>', 
            @rowspan,
            @headline, @txt,
            @txt,
        end
        )
    end
    
    def to_s
        return sprintf("<'%s' rowspan=%s>", @txt, @rowspan)
    end
    __repr__ = __str__
end


headlines = (
  "instruction",
  "mnemonic",
  "CC flags",
  "example",
  "op code",
  "bytes",
  "cycles",
  "address mode",
  "needs ea",
  "read from memory",
  "write to memory",
  "register",
end
)


# Collect the data for the table from MC6809_data_raw2
data = []
for instruction, instr_data in sorted(OP_DATA.items())
    for mnemonic, memoric_data in sorted(instr_data["mnemonic"].items())
        instruction_doc = OP_DOC[instruction]
        mnemonic_doc = instruction_doc["mnemonic"][mnemonic]
        
        for op_code, op_data in sorted(memoric_data["ops"].items())
            
            addr_mode = op_data["addr_mode"]
            if addr_mode
                addr_mode = addr_mode.replace("_", " ").lower()
            end
            
            if op_code > 0xff
                op_code = "$%04x" % op_code
            else
                op_code = "$%02x" % op_code
            end
            
            
            data.append([
                instruction,
                mnemonic,
                mnemonic_doc["HNZVC"] or "",
                mnemonic_doc["desc"] or "",
                op_code,
                op_data["bytes"],
                op_data["cycles"],
                addr_mode,
                
                "yes" if memoric_data["needs_ea"] else "no",
                WIDTH_DICT[memoric_data["read_from_memory"]],
                WIDTH_DICT[memoric_data["write_to_memory"]],
                memoric_data["register"] or "-",
            end
            
            ])
        end
    end
end


# add rowspan information
for colum_no in range(len(data[0]))
    old_cell = nil
    same_count = 0
    for row in reversed(data)
        cell = row[colum_no] = Cell.new(row[colum_no])
        if old_cell.equal? nil
            same_count = 1
        end
        elsif cell.txt == old_cell.txt
            old_cell.rowspan = nil
            same_count += 1
        else
            old_cell.rowspan = same_count
            same_count = 1
        end
        old_cell = cell
    end
    old_cell.rowspan = same_count
end


# add headline to cells(used for td title="")
for row in data
    for cell, headline in zip(row, headlines)
        if cell.rowspan.equal? not nil
            cell.headline = headline
        end
    end
end


# generate html file
File.open(OUTFILENAME, 'w') do |htmlfile|
    htmlfile.write("""<!DOCTYPE html>
end
<html>
<head>
<style>
table, th, td{border-collapse:collapse;border:1px solid black;}
th, td {padding:5px;}
</style>
</head>
<body>
<h1>6809 opcodes:</h1>
<table>
<tr>
""")
    for headline in headlines
        htmlfile.write("\t<th>%s</th>\n" % headline)
    end
    htmlfile.write("</tr>\n")
    
    for row in data
        htmlfile.write("\t<tr>\n")
        for cell in row
            if cell.rowspan.equal? not nil
                htmlfile.write("\t\t%s\n" % cell.html())
            end
        end
        htmlfile.write("\t</tr>\n")
    end
    htmlfile.write("</table>")
    htmlfile.write(
        "<addr>This file was generated by %s</addr>" % os.path.split(__file__)[1]
    end
    )
    htmlfile.write("</body></html>")
end


print("file %r written" % OUTFILENAME)
print(" -- END -- ")
